#include <stdlib.h>
#include <stdio.h>

int dlugosc1(char *napis){
    int i = 0;
    while (napis[i] != 0)
    {
        i++;
    }
    return i;
}

void zmiana_napisu(char *napis) {
    *napis++;
    while (*napis != '\0') {
        if (*napis == ' ') {
            *napis = '.';
            *napis++;
        } else if(*napis > 64 && *napis < 133){
            *napis += 32;
        }
        napis++;
    }
}
char* zamienSpacjeNaKropki(char* napis) {
    int dlugosc = dlugosc1(napis);
    char* wynik = malloc((dlugosc + 1) * sizeof(char));
    wynik[0] = napis[0];
    for (int i = 1; i < dlugosc; i++) {
        if (napis[i] == ' ') {
            wynik[i] = '.';
            i++;
            wynik[i] = napis[i];
        } else if(napis[i] > 64 && napis[i] < 133){
            wynik[i] = napis[i] + 32;
        }
        else {
            wynik[i] = napis[i];
        }
    }
    
    wynik[dlugosc] = '\0';
    
    return wynik;
}
char *wstaw_W(char *napis) {
    char* wynik = malloc(sizeof(char) * (2 * dlugosc1(napis) + 1));
    int indexer = 0;
    
    for(int i = 0; i < dlugosc1(napis); i++) {
        if(napis[i] == 'a' && napis[i + 1] == 'b'){
            wynik[indexer++] = 'a';
            wynik[indexer++] = 'W';
        } 
        else if(napis[i] == 'b' && napis[i + 1] == 'a') {
            wynik[indexer++] = 'b';
            wynik[indexer++] = 'W';            
        }
        else{
            wynik[indexer++] = napis[i];
        }
        wynik[indexer] = '\0';
    }
    return wynik;
}

int slad(unsigned int n, int tab[n][n]) {
    int suma = 0;
    for(int i = 0; i < n; i++) {
        suma += tab[i][i];
    }
    return suma;
}
int suma_krawedzi(unsigned int n, unsigned int m, int tab[n][m]){
    int suma = 0;
    for(int i = 0; i < n; i++){
        for(int j = 0; j < m; j++){
            if(i == 0 || i == n - 1){
                suma += tab[i][j];
            }
            else if(j == 0 || j == m - 1){
                suma += tab[i][j];
            }
        }
    }
    return suma;
}
int **zamiana_kolumn(unsigned int n, unsigned int m, int tab[n][m]){
    int **wynik = malloc(sizeof(int) * n * m + 1);
    int pom = 0;
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m/2; j++) {
            pom = tab[j][i];
            tab[j][i] = tab[m - j - 1][i];
            tab[m-j-1][i] = pom;
        }
    }
    for(int k = 0; k < 4; k++) {
        for (int g = 0; g < 4; g++)
        {
            printf("%d ", tab[k][g]);
        }
        printf("\n");
    }
    return tab;
}
int main(){
    char nazwa[] = "KAMIL NOWAK";
    zmiana_napisu(nazwa);
    printf("%s\n", nazwa);
    char *imie = "KAMIL NOWAK";
    char* slowo = "baba";
    char* wynik = zamienSpacjeNaKropki(imie);
    printf("Po zamianie: %s\n", wynik);
    printf("%s", wstaw_W(slowo));
    int tab[4][4] = {
    {1, 2, 3, 33},
    {5, 6, 7, 44},
    {9, 10, 11, 34},
    {12, 13, 14, 12}
};
    printf("%d\n", suma_krawedzi(3, 3, tab));
    zamiana_kolumn(4, 4, tab);
}

??????????????????????????????????????????????????????????????
??????????????????????????????????????????????????????????????


/////////////DŁUGOŚĆ ZNAKU ///////////
int dlugosc(char *napis){
    int i=0;
while(napis[i]!=0){
i++;
}
return i;
}


////////CZYSZCZENIE NAPISU ///////////////////
void wyczysc(char *napis){
napis[0]=0;
}


///////////USUWANIE SPACJI ///////////////////
char *usun_spacje(char *napis){
    int i=0;
    int j=0;
char *wynik=malloc(100*sizeof(char));
while(napis[i]!=0){
    if(napis[i]!=32){
        wynik[j]=napis[i];
        j++;
    }
    i++;
}
wynik[j]=0;
return wynik;
}


///////////////ZAMIANA SPACJI NA INNY ZNAK ////////////////////////
char *zmien_spacje(char *napis){
    int i=0;
char *wynik=malloc(100*sizeof(char));
while(napis[i]!=0){
    if(napis[i]!=32){
        wynik[i]=napis[i];
    }else{
        wynik[i]=95;
    }
    i++;
}
wynik[i]=0;
return wynik;
}


///////////////ZLICZANIE WIELKICH LITER /////////////////
int wielka_litera(char *napis){
    int i=0;
    int pom=0;
while(napis[i]!=0){
if(napis[i]>64 && napis[i]<91){
    pom++;
}
i++;
}
return pom;
}


///////////////POROWNANIE NAPISÓW////////////////
int porownaj(char *napis1,char *napis2){
    int d1=dlugosc(napis1);
    int d2=dlugosc(napis2);
if(d1!=d2){
    return 0;
}else{
    for(int i=0;i<=d1;i++){
        if(napis1[i]!=napis2[i]){
                return 0;
        }
    }
    return 1;
}
}


////////////KOLEJNOSC W PORZADKU LEKSYKOGRAFICZNYM//////////////
int leksykografia(char *napis1,char *napis2){
int d1=dlugosc(napis1);
int d2=dlugosc(napis2);
if(d1<d2){
    for(int i=0;i<=d2;i++){
        if(napis1[i]!=napis2[i]){
                if(napis1[i]<napis2[i]){
                    return 1;
                }
                else if(napis1[i]>napis2[i]){
                return 0;
                }
        }
    }
}
if(d1>d2){
    for(int i=0;i<=d1;i++){
        if(napis1[i]!=napis2[i]){
                if(napis1[i]<napis2[i]){
                    return 1;
                }
                else if(napis1[i]>napis2[i]){
                return 0;
                }
        }
    }
}
if(d1==d2){
     for(int i=0;i<=d1;i++){
        if(napis1[i]!=napis2[i]){
                if(napis1[i]<napis2[i]){
                    return 1;
                }
                else if(napis1[i]>napis2[i]){
                return 0;
                }
        }
    }
    return 0;
}
}


//////////DOPISYWANIE JEDNEGO NAPISU DO DRUGIEGO/////////////////////
void dopisz(char *napis1,char *napis2){
    napis2=malloc(100*sizeof(char));
    int d1=dlugosc(napis1);
    int x=0;
    int i=d1+1;
    int j=d1;
    while(j!=0){
        napis2[i]=napis1[x];
        j--;
        i++;
        x++;
    }

napis2[i]=0;

}

///////////////////////////


//////////WCZYTANIE TABLIC DWUWYMIAROWYCH/////////////////

void wczytaj(int** t,unsigned int n,unsigned int m){
for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
        scanf("%d",&t[i][j]);
    }
}
}


//////////ALOKOWANIE TABLIC DWUWYMIAROWYCH///////////////

int** alokuj(int **t,unsigned int n,unsigned int m){
int **x=malloc(n*sizeof(int*));
for(int i=0;i<n;i++){
    x[i]=malloc(m*sizeof(int));
}
return x;
}

///////// WYPISYWANIE TABLIC DWUWYMIAROWYCH ///////////////
void wypisz(int**tab,unsigned int n, unsigned int m){
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      printf("%i",tab[i][j]);
    }
    printf("\n");
  }
}

/////////DEKLAROWANIE LISTY JAKO STRUKTURY/////////////
struct element{
int i;
struct element * next;
};


////////////TWORZENIE LISTY //////////////
struct element *utworz(){
return NULL;
};

////////CZYSZCZENIE LISTY/////////////
void wyczysc(struct element* Lista){
struct element *wsk=Lista;
while(Lista!=NULL){
    Lista=Lista->next;
    free(wsk);
    wsk=Lista;
}
}


////////////DODAWANIE ELEMENTU NA POCZATEK I KONIEC LISTY //////////////

struct element * dodajnapoczatek(struct element* Lista, int a){
struct element *wsk=malloc(sizeof(struct element));
wsk->i=a;
wsk->next=Lista;
return wsk;
};

 ///////////////////////////////////////////////////////////////

struct element *dodajnakoniec(struct element* Lista,int a){
struct element *wsk;
if(Lista==NULL){
    Lista=wsk=malloc(sizeof(struct element));
}
else{
    wsk=Lista;
    while(wsk->next!=NULL)
    {
        wsk=wsk->next;
    }
    wsk->next=malloc(sizeof(struct element));
    wsk=wsk->next;
}
wsk->i=a;
wsk->next=NULL;
return Lista;
}

///////////////////////////////////////
///////////DODAWANIE ELEMENTU ZA PODANYM ELEMENTEM///////////

struct element *dodajw(struct element* Lista,struct element* elem,int a){
struct element *wsk=malloc(sizeof(struct element));
wsk->i=a;
if(elem==NULL){
    wsk->next=Lista;
    Lista=wsk;
}else{
wsk->next=elem->next;
elem->next=wsk;
}
return Lista;
}

///////////////////////////////////////
//////////////WYPISYWANIE LISTY /////////

void wypisz(struct element* Lista){
while(Lista!=NULL){
    printf("%d\t",Lista->i);
    Lista=Lista->next;
}
printf("\n");
}

////////// SUMA ELEMENTÓW LISTY ////////////

void suma(struct element* Lista){
    int pom,suma=0;
while(Lista!=NULL){
    pom=Lista->i;
    suma=suma+pom;
    Lista=Lista->next;
}
printf("%d\n",suma);
}

/////////////////////////////////////////
//////////ZNAJDOWANIE ELEMENTU W LIŚCIE//////////////


struct element *znajdz(struct element* Lista,int a){
while((Lista!=NULL)&&(Lista->i!=a)){
   Lista=Lista->next;
}
return Lista;

};


/////////// ODWRACANIE ELEMENTU W LIŚCIE //////////////

struct element* odwroc(struct element* Lista){
struct element * pom1,*pom2;
if((Lista==NULL)||(Lista->next==NULL))
    return Lista;
pom1=Lista->next;
pom2=pom1->next;
Lista->next=NULL;
pom1->next=Lista;
while(pom2!=NULL){
    Lista=pom1;
    pom1=pom2;
    pom2=pom2->next;
    pom1->next=Lista;
}
return pom1;
};

////////////////////////////////////////////////////////
?????????????????????????????????????????????????????????
?????????????????????????????????????????????????????????


//////////////////////1////////////////


#include <stdio.h>
#include <stdlib.h>

int dlugosc(char *napis){
    int i=0;
while(napis[i]!=0){
i++;
}
return i;
}

char* zmiana_napisu(char *imie){
int poczatek_nazwiska=-1;
for(int i=0;i<dlugosc(imie);i++){
    if(imie[i]==32){
        poczatek_nazwiska=i;
        imie[i]='.';
}else if(i==0)
{
    if(imie[i]>=97 && imie[i]<=122){
        imie[i]=imie[i]-32;
}
}else if(i==poczatek_nazwiska+1)
{
    if(imie[i]>=97 && imie[i]<=122){
        imie[i]=imie[i]-32;
}
}else{
    if(imie[i]>=97 && imie[i]<=122)
{

}else{
    imie[i]=imie[i]+32;
}
}
}
return imie;
}


int main(){
char t[]="tomasz komenda";
printf("%s",zmiana_napisu(t));


return 0;
}

////////////////////////////////////////////
//////////////////////2////////////////////////
#include <stdio.h>
#include <stdlib.h>

int dlugosc(char *napis){
    int i=0;
while(napis[i]!=0){
i++;
}
return i;
}

char * dodanie_W(char* napis)
{   char* napis2=malloc((dlugosc(napis)+1)*sizeof(char));
    int j=0;
    char temp;
    for (int i=0;i<dlugosc(napis);i++) {
        napis2[j]=napis[i];
        j++;
        if(i<dlugosc(napis)-1&&((napis[i]-napis[i + 1])==1||(napis[i]-napis[i + 1])==-1)){
            napis2=realloc(napis2,(dlugosc(napis)+2)*sizeof(char));
            temp=napis[i+1];
            napis2[j]='W';
            j++;
            napis2[j]=temp;
            j++;
            i++;
        }
    }
    napis2[j]='\0';
    return napis2;
}


int main(){
char t[]="dxabfjibaabd";
printf("%s",dodanie_W(t));


return 0;
}


/////////////////3//////////
#include <stdio.h>
#include <stdlib.h>
int** alokuj(int **t,unsigned int n,unsigned int m){
int **x=malloc(n*sizeof(int*));
for(int i=0;i<n;i++){
    x[i]=malloc(m*sizeof(int));
}
return x;
}
void wczytaj(int** t,unsigned int n,unsigned int m){
for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
        scanf("%d",&t[i][j]);
    }
}
}
void wypisz(int**tab,unsigned int n, unsigned int m){
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      printf("%i",tab[i][j]);
    }
    printf("\n");
  }
}
int suma_przekatnej(int unsigned n,int**tab){
int suma=0;
for(int i=0;i<n;i++){
suma+=tab[i][i];
}
return suma;
}
int sum_parzyste_naroznik(int**t,unsigned int n, unsigned int m){
  int sum=0;
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      if(i==0 && j==0){
        sum+=t[i][j];
      }else if(i==n-1 && j==0){
        sum+=t[i][j];
      }else if(i==0 && j==m-1){
        sum+=t[i][j];
      }else if(i==n-1 && j==m-1){
        sum+=t[i][j];
}
}
}
return sum;
}

int sum_parzyste_brzegi(int**t,unsigned int n,unsigned int m){
int sum=0;
for(int i=0;i<n;i++){
if((i==0)||(i==n-1)){
for(int j=0;j<m;j++){
if(t[i][j]%2==0)sum+=t[i][j];
}
}else{
if(t[i][m-1]%2==0)sum+=t[i][m-1];
if(t[i][0]%2==0)sum+=t[i][0];
}
}
return sum;
}
int main(){
int**tab=alokuj(tab,3,3);
wczytaj(tab,3,3);
wypisz(tab,3,3);
printf("%d\n",suma_przekatnej(3,tab));
printf("%d",sum_parzyste_brzegi(tab,3,3));


return 0;
}

//////////////4////////////////////

#include <stdio.h>
#include <stdlib.h>

int** alokuj(int **t,unsigned int n,unsigned int m){
int **x=malloc(n*sizeof(int*));
for(int i=0;i<n;i++){
    x[i]=malloc(m*sizeof(int));
}
return x;
}
void wczytaj(int** t,unsigned int n,unsigned int m){
for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
        scanf("%d",&t[i][j]);
    }
}
}
void wypisz(int**tab,unsigned int n, unsigned int m){
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      printf("%i",tab[i][j]);
    }
    printf("\n");
  }
  printf("\n");
}
void odwrocone_kolumny(int**t, int unsigned n, int unsigned m) {
    int temp;
    for (int i=0;i<n;i++) {
        for (int j=0;j<m/2;j++) {
            temp=t[j][i];
            t[j][i]=t[m - j - 1][i];
            t[m-j-1][i]=temp;
        }
    }
}
void przesuniete_o_dwa(int** t, int n, int m) {
    for (int i = 0; i < n; i++) {
        int* t2= malloc(m * sizeof(int));
        for (int j = 0; j < m; j++) {
            t2[(j + 2) % m] = t[i][j];
        }
        t[i] = t2;
    }
}




int main() {
    int**tab=alokuj(tab,4,4);
wczytaj(tab,4,4);
wypisz(tab,4,4);
odwrocone_kolumny(tab,4,4);
wypisz(tab,4,4);
przesuniete_o_dwa(tab,4,4);
wypisz(tab,4,4);

    return 0;
}